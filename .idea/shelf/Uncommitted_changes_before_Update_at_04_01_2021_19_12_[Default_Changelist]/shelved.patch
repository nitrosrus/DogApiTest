Index: app/src/main/java/com/example/dogapitest/ui/fragment/ImageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.dogapitest.ui.fragment\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\n\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.dogapitest.App\r\nimport com.example.dogapitest.BackButtonListener\r\nimport com.example.dogapitest.R\r\nimport com.example.dogapitest.databinding.ImageFragmentBinding\r\nimport com.example.dogapitest.mvp.presenter.ImagePresenter\r\nimport com.example.dogapitest.mvp.view.BreedsImageView\r\nimport com.example.dogapitest.mvp.view.DpVisible\r\nimport com.example.dogapitest.ui.adapter.ImageRVAdapter\r\nimport io.reactivex.rxjava3.android.schedulers.AndroidSchedulers\r\n\r\nimport moxy.MvpAppCompatFragment\r\nimport moxy.presenter.InjectPresenter\r\nimport moxy.presenter.ProvidePresenter\r\n\r\nclass ImageFragment : MvpAppCompatFragment(R.layout.image_fragment), BreedsImageView,\r\n    BackButtonListener {\r\n    companion object {\r\n        const val IMAGEBREEDS_KEY = \"imagebreeds\"\r\n        const val IMAGESUBBREEDS_KEY = \"imagesubbreds\"\r\n        fun newInstance(breed: String, subBreeds: String?) = ImageFragment().apply {\r\n            arguments = Bundle().apply {\r\n                putString(IMAGEBREEDS_KEY, breed)\r\n                putString(IMAGESUBBREEDS_KEY, subBreeds)\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    var adapter: ImageRVAdapter? = null\r\n\r\n\r\n    @InjectPresenter\r\n    lateinit var presenter: ImagePresenter\r\n\r\n    private var _binding: ImageFragmentBinding? = null\r\n\r\n    private val binding get() = _binding!!\r\n\r\n    private val breedsComponent = App.instance.imageComponent\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = ImageFragmentBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        breedsComponent.inject(this)\r\n        setTing()\r\n\r\n    }\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n    fun setTing() {\r\n        if (presenter.oneOrTwo())\r\n            (activity as DpVisible).setImageBreedScreenSetting(\r\n                arguments?.get(IMAGEBREEDS_KEY).toString()\r\n            )\r\n        else\r\n            (activity as DpVisible).setImageBreedScreenSetting(\r\n                arguments?.get(IMAGEBREEDS_KEY).toString(),\r\n                arguments?.get(IMAGESUBBREEDS_KEY).toString()\r\n            )\r\n\r\n\r\n    }\r\n\r\n    @ProvidePresenter\r\n    fun providePresenter() =\r\n        ImagePresenter(\r\n            AndroidSchedulers.mainThread(),\r\n            arguments!![IMAGEBREEDS_KEY] as String,\r\n            arguments!![IMAGESUBBREEDS_KEY] as String?\r\n        ).apply {\r\n            breedsComponent.inject(this)\r\n        }\r\n\r\n    override fun backClicked() = presenter.backClicked()\r\n\r\n    override fun init() {\r\n\r\n        binding.rvImage.layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)\r\n        adapter = ImageRVAdapter(presenter.imageListPresenter).apply {\r\n            breedsComponent.inject(this)\r\n        }\r\n        binding.rvImage.adapter = adapter\r\n\r\n    }\r\n\r\n\r\n    override fun updateRVAdapter() {\r\n        adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n\r\n    override fun loadImage(url: String) {\r\n\r\n    }\r\n\r\n    override fun serverErrorInternet() {\r\n//        fragmentManager?.let {\r\n//            ShowAlertDialog.newInstance().show(\r\n//                it, SubBreedsFragment.DIALOG_FRAGMENT_TAG\r\n//            )\r\n//        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/dogapitest/ui/fragment/ImageFragment.kt	(revision caf230d2c728c67c43ec611cbb8b50766ed01b66)
+++ app/src/main/java/com/example/dogapitest/ui/fragment/ImageFragment.kt	(date 1609776533758)
@@ -4,7 +4,6 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.example.dogapitest.App
@@ -12,17 +11,18 @@
 import com.example.dogapitest.R
 import com.example.dogapitest.databinding.ImageFragmentBinding
 import com.example.dogapitest.mvp.presenter.ImagePresenter
-import com.example.dogapitest.mvp.view.BreedsImageView
 import com.example.dogapitest.mvp.view.DpVisible
+import com.example.dogapitest.mvp.view.ImageView
 import com.example.dogapitest.ui.adapter.ImageRVAdapter
-import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
-
+import com.example.dogapitest.ui.dialog.IShowAlertDialog
 import moxy.MvpAppCompatFragment
 import moxy.presenter.InjectPresenter
 import moxy.presenter.ProvidePresenter
+import javax.inject.Inject
 
-class ImageFragment : MvpAppCompatFragment(R.layout.image_fragment), BreedsImageView,
+class ImageFragment : MvpAppCompatFragment(R.layout.image_fragment), ImageView,
     BackButtonListener {
+
     companion object {
         const val IMAGEBREEDS_KEY = "imagebreeds"
         const val IMAGESUBBREEDS_KEY = "imagesubbreds"
@@ -36,17 +36,19 @@
 
     }
 
-    var adapter: ImageRVAdapter? = null
-
-
     @InjectPresenter
     lateinit var presenter: ImagePresenter
 
+    @Inject
+    lateinit var dialog: IShowAlertDialog
+
+    var adapter: ImageRVAdapter? = null
+
     private var _binding: ImageFragmentBinding? = null
 
     private val binding get() = _binding!!
 
-    private val breedsComponent = App.instance.imageComponent
+    private val iComponent = App.instance.imageComponent
 
     override fun onCreateView(
         inflater: LayoutInflater,
@@ -60,48 +62,37 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        breedsComponent.inject(this)
-        setTing()
+        iComponent.inject(this)
+    }
 
+    override fun onResume() {
+        super.onResume()
+        screenSetting()
     }
+
     override fun onDestroyView() {
         super.onDestroyView()
         _binding = null
     }
-    fun setTing() {
-        if (presenter.oneOrTwo())
-            (activity as DpVisible).setImageBreedScreenSetting(
-                arguments?.get(IMAGEBREEDS_KEY).toString()
-            )
-        else
-            (activity as DpVisible).setImageBreedScreenSetting(
-                arguments?.get(IMAGEBREEDS_KEY).toString(),
-                arguments?.get(IMAGESUBBREEDS_KEY).toString()
-            )
-
-
-    }
 
     @ProvidePresenter
     fun providePresenter() =
         ImagePresenter(
-            AndroidSchedulers.mainThread(),
             arguments!![IMAGEBREEDS_KEY] as String,
             arguments!![IMAGESUBBREEDS_KEY] as String?
         ).apply {
-            breedsComponent.inject(this)
+            iComponent.inject(this)
         }
 
-    override fun backClicked() = presenter.backClicked()
 
     override fun init() {
 
         binding.rvImage.layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)
         adapter = ImageRVAdapter(presenter.imageListPresenter).apply {
-            breedsComponent.inject(this)
+            iComponent.inject(this)
         }
         binding.rvImage.adapter = adapter
-
+        dialog.clickListener = { presenter.awaitNetworkStatus() }
     }
 
 
@@ -110,17 +101,25 @@
     }
 
 
-    override fun loadImage(url: String) {
-
-    }
-
     override fun serverErrorInternet() {
-//        fragmentManager?.let {
-//            ShowAlertDialog.newInstance().show(
-//                it, SubBreedsFragment.DIALOG_FRAGMENT_TAG
-//            )
-//        }
+        dialog.getAlertInternet(requireContext()).show()
+
     }
 
+    private fun screenSetting() {
 
+        if (presenter.oneOrTwo())
+            (activity as DpVisible).setImageBreedScreenSetting(
+                arguments?.get(IMAGEBREEDS_KEY).toString()
+            )
+        else
+            (activity as DpVisible).setImageBreedScreenSetting(
+                arguments?.get(IMAGEBREEDS_KEY).toString(),
+                arguments?.get(IMAGESUBBREEDS_KEY).toString()
+            )
+
+
+    }
+
+    override fun backClicked() = presenter.backClicked()
 }
